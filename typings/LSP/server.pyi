import asyncio
from _typeshed import Incomplete
from enum import IntEnum
from typing import Any

__version__: str
StringDict = dict[str, Any]
PayloadLike = list[StringDict] | StringDict | None
ENCODING: str

class ErrorCode(IntEnum):
    ParseError = -32700
    InvalidRequest = -32600
    MethodNotFound = -32601
    InvalidParams = -32602
    InternalError = -32603
    serverErrorStart = -32099
    serverErrorEnd = -32000
    ServerNotInitialized = -32002
    UnknownErrorCode = -32001
    RequestCancelled = -32800
    ContentModified = -32801

class Error(Exception):
    code: Incomplete
    def __init__(self, code: ErrorCode, message: str) -> None: ...
    def to_lsp(self) -> StringDict: ...
    @classmethod
    def from_lsp(cls, d: StringDict) -> Error: ...

def jsonrpc() -> StringDict: ...
def make_response(request_id: Any, params: PayloadLike) -> StringDict: ...
def make_error_response(request_id: Any, err: Error) -> StringDict: ...
def make_notification(method: str, params: PayloadLike) -> StringDict: ...
def make_request(method: str, request_id: Any, params: PayloadLike) -> StringDict: ...
def dump(payload: PayloadLike) -> bytes: ...
def content_length(line: bytes) -> int | None: ...

class MessageType:
    error: int
    warning: int
    info: int
    log: int

class StopLoopException(Exception): ...

class Request:
    async def on_error(self, err: Error) -> None: ...
    async def on_result(self, params: PayloadLike) -> None: ...

class SimpleRequest(Request):
    cv: Incomplete
    result: Incomplete
    error: Incomplete
    def __init__(self) -> None: ...
    async def on_result(self, params: PayloadLike) -> None: ...
    async def on_error(self, err: Error) -> None: ...

class Session:
    def __init__(self, reader: asyncio.StreamReader, writer: asyncio.StreamWriter) -> None: ...
    async def request(self, method: str, params: PayloadLike) -> PayloadLike: ...
    async def run_forever(self) -> bool: ...

async def stdio() -> tuple[asyncio.StreamReader, asyncio.StreamWriter]: ...
async def main(tcp_port: int | None = None) -> bool: ...
