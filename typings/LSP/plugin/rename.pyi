import sublime
import sublime_plugin
from .core.edit import WorkspaceChanges as WorkspaceChanges, parse_range as parse_range, parse_workspace_edit as parse_workspace_edit
from .core.protocol import PrepareRenameParams as PrepareRenameParams, PrepareRenameResult as PrepareRenameResult, Range as Range, RenameParams as RenameParams, Request as Request, WorkspaceEdit as WorkspaceEdit
from .core.registry import LspTextCommand as LspTextCommand, get_position as get_position, windows as windows
from .core.sessions import Session as Session
from .core.url import parse_uri as parse_uri
from .core.views import get_line as get_line, range_to_region as range_to_region, text_document_position_params as text_document_position_params
from _typeshed import Incomplete
from typing_extensions import TypeGuard

BUTTONS_TEMPLATE: str
DISCARD_COMMAND_URL: Incomplete
PREPARE_RENAME_CAPABILITY: str

def is_range_response(result: PrepareRenameResult) -> TypeGuard[Range]: ...
def utf16_to_code_points(s: str, col: int) -> int: ...

class LspSymbolRenameCommand(LspTextCommand):
    capability: str
    def is_visible(self, new_name: str = '', placeholder: str = '', session_name: str | None = None, event: dict | None = None, point: int | None = None) -> bool: ...
    def input(self, args: dict) -> sublime_plugin.TextInputHandler | None: ...
    def run(self, edit: sublime.Edit, new_name: str = '', placeholder: str = '', session_name: str | None = None, event: dict | None = None, point: int | None = None) -> None: ...

class RenameSymbolInputHandler(sublime_plugin.TextInputHandler):
    def want_event(self) -> bool: ...
    view: Incomplete
    def __init__(self, view: sublime.View, placeholder: str) -> None: ...
    def name(self) -> str: ...
    def placeholder(self) -> str: ...
    def initial_text(self) -> str: ...
    def validate(self, name: str) -> bool: ...

class LspHideRenameButtonsCommand(sublime_plugin.WindowCommand):
    def run(self) -> None: ...
