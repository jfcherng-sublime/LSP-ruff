import sublime
from .code_lens import CodeLensView as CodeLensView, LspToggleCodeLensesCommand as LspToggleCodeLensesCommand
from .core.active_request import ActiveRequest as ActiveRequest
from .core.constants import DOCUMENT_HIGHLIGHT_KIND_NAMES as DOCUMENT_HIGHLIGHT_KIND_NAMES, HOVER_ENABLED_KEY as HOVER_ENABLED_KEY, REGIONS_INITIALIZE_FLAGS as REGIONS_INITIALIZE_FLAGS, RegionKey as RegionKey, SHOW_DEFINITIONS_KEY as SHOW_DEFINITIONS_KEY
from .core.promise import Promise as Promise
from .core.protocol import CodeLens as CodeLens, CodeLensExtended as CodeLensExtended, DiagnosticTag as DiagnosticTag, DocumentUri as DocumentUri, Notification as Notification, Request as Request
from .core.sessions import AbstractViewListener as AbstractViewListener, Session as Session
from .core.settings import userprefs as userprefs
from .core.views import DIAGNOSTIC_SEVERITY as DIAGNOSTIC_SEVERITY, text_document_identifier as text_document_identifier
from .diagnostics import DiagnosticsAnnotationsView as DiagnosticsAnnotationsView
from .session_buffer import SessionBuffer as SessionBuffer
from _typeshed import Incomplete
from typing import Any, Generator, Iterable
from weakref import ref

DIAGNOSTIC_TAG_VALUES: list[int]

class TagData:
    key: Incomplete
    regions: Incomplete
    scope: Incomplete
    def __init__(self, key: str, regions: list[sublime.Region] = [], scope: str = '') -> None: ...

class SessionView:
    HOVER_PROVIDER_KEY: str
    AC_TRIGGERS_KEY: str
    COMPLETION_PROVIDER_KEY: str
    TRIGGER_CHARACTERS_KEY: str
    code_lenses_needs_refresh: bool
    def __init__(self, listener: AbstractViewListener, session: Session, uri: DocumentUri) -> None: ...
    def on_before_remove(self) -> None: ...
    @property
    def session(self) -> Session: ...
    @property
    def view(self) -> sublime.View: ...
    @property
    def listener(self) -> ref[AbstractViewListener]: ...
    @property
    def session_buffer(self) -> SessionBuffer: ...
    def reset_show_definitions(self) -> None: ...
    def get_uri(self) -> DocumentUri | None: ...
    def get_language_id(self) -> str | None: ...
    def get_view_for_group(self, group: int) -> sublime.View | None: ...
    def get_capability_async(self, capability_path: str) -> Any | None: ...
    def on_capability_added_async(self, registration_id: str, capability_path: str, options: dict[str, Any]) -> None: ...
    def on_capability_removed_async(self, registration_id: str, discarded_capabilities: dict[str, Any]) -> None: ...
    def has_capability_async(self, capability_path: str) -> bool: ...
    def shutdown_async(self) -> None: ...
    def diagnostics_key(self, severity: int, multiline: bool) -> str: ...
    def diagnostics_tag_scope(self, tag: int) -> str | None: ...
    def present_diagnostics_async(self, is_view_visible: bool) -> None: ...
    def on_request_started_async(self, request_id: int, request: Request) -> None: ...
    def on_request_finished_async(self, request_id: int) -> None: ...
    def on_request_progress(self, request_id: int, params: dict[str, Any]) -> None: ...
    def on_text_changed_async(self, change_count: int, changes: Iterable[sublime.TextChange]) -> None: ...
    def on_revert_async(self) -> None: ...
    def on_reload_async(self) -> None: ...
    def purge_changes_async(self) -> None: ...
    def on_pre_save_async(self) -> None: ...
    def on_post_save_async(self, new_uri: DocumentUri) -> None: ...
    def on_userprefs_changed_async(self) -> None: ...
    def start_code_lenses_async(self) -> None: ...
    def clear_code_lenses_async(self) -> None: ...
    def resolve_visible_code_lenses_async(self) -> None: ...
    def set_code_lenses_pending_refresh(self, needs_refresh: bool = True) -> None: ...
    def get_resolved_code_lenses_for_region(self, region: sublime.Region) -> Generator[CodeLensExtended, None, None]: ...
