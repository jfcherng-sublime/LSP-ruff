import socket
import subprocess
from .constants import ST_PLATFORM as ST_PLATFORM
from .logging import debug as debug, exception_log as exception_log
from .types import TCP_CONNECT_TIMEOUT as TCP_CONNECT_TIMEOUT, TransportConfig as TransportConfig
from _typeshed import Incomplete
from typing import Any, Generic, IO, Protocol, TypeVar

T = TypeVar('T')
T_contra = TypeVar('T_contra', contravariant=True)

class StopLoopError(Exception): ...

class Transport(Generic[T]):
    def send(self, payload: T) -> None: ...
    def close(self) -> None: ...

class TransportCallbacks(Protocol[T_contra]):
    def on_transport_close(self, exit_code: int, exception: Exception | None) -> None: ...
    def on_payload(self, payload: T_contra) -> None: ...
    def on_stderr_message(self, message: str) -> None: ...

class AbstractProcessor(Generic[T]):
    def write_data(self, writer: IO[bytes], data: T) -> None: ...
    def read_data(self, reader: IO[bytes]) -> T | None: ...

class JsonRpcProcessor(AbstractProcessor[dict[str, Any]]):
    def write_data(self, writer: IO[bytes], data: dict[str, Any]) -> None: ...
    def read_data(self, reader: IO[bytes]) -> dict[str, Any] | None: ...

class ProcessTransport(Transport[T]):
    def __init__(self, name: str, process: subprocess.Popen | None, socket: socket.socket | None, reader: IO[bytes], writer: IO[bytes], stderr: IO[bytes] | None, processor: AbstractProcessor[T], callback_object: TransportCallbacks[T]) -> None: ...
    def send(self, payload: T) -> None: ...
    def close(self) -> None: ...
    def __del__(self) -> None: ...

json_rpc_processor: Incomplete

def create_transport(config: TransportConfig, cwd: str | None, callback_object: TransportCallbacks) -> Transport[dict[str, Any]]: ...
def kill_all_subprocesses() -> None: ...
